// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TopMenu Component Should render component 1`] = `
<MockedProvider
  addTypename={false}
  mocks={
    Array [
      Object {
        "request": Object {
          "query": Object {
            "definitions": Array [
              Object {
                "directives": Array [],
                "kind": "OperationDefinition",
                "name": undefined,
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "alias": undefined,
                      "arguments": Array [],
                      "directives": Array [
                        Object {
                          "arguments": Array [],
                          "kind": "Directive",
                          "name": Object {
                            "kind": "Name",
                            "value": "client",
                          },
                        },
                      ],
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "userLocation",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "id",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "name",
                            },
                            "selectionSet": undefined,
                          },
                        ],
                      },
                    },
                  ],
                },
                "variableDefinitions": Array [],
              },
            ],
            "kind": "Document",
            "loc": Object {
              "end": 68,
              "start": 0,
            },
          },
        },
        "result": Object {
          "userLocation": Object {
            "id": 1,
            "name": "Lagos",
          },
        },
      },
      Object {
        "request": Object {
          "query": undefined,
        },
        "result": Array [
          Object {
            "id": "2",
            "name": "Kampala",
          },
          Object {
            "id": "3",
            "name": "Nairobi",
          },
          Object {
            "id": "1",
            "name": "Lagos",
          },
        ],
      },
    ]
  }
>
  <ApolloProvider
    client={
      ApolloClient {
        "__operations_cache__": Map {},
        "cache": InMemoryCache {
          "addTypename": false,
          "cacheKeyRoot": KeyTrie {
            "weakness": true,
          },
          "config": Object {
            "addTypename": false,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "freezeResults": false,
            "resultCaching": true,
          },
          "data": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "maybeBroadcastWatch": [Function],
          "optimisticData": DepTrackingCache {
            "data": Object {},
            "depend": [Function],
          },
          "silenceBroadcast": false,
          "storeReader": StoreReader {
            "executeSelectionSet": [Function],
            "executeStoreQuery": [Function],
            "executeSubSelectedArray": [Function],
            "freezeResults": false,
          },
          "storeWriter": StoreWriter {},
          "typenameDocumentCache": Map {},
          "watches": Set {},
        },
        "clearStoreCallbacks": Array [],
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": MockLink {
          "addTypename": false,
          "mockedResponsesByKey": Object {
            "{\\"variables\\":{},\\"query\\":\\"{\\\\n  userLocation @client {\\\\n    id\\\\n    name\\\\n  }\\\\n}\\\\n\\"}": Array [
              Object {
                "request": Object {
                  "query": Object {
                    "definitions": Array [
                      Object {
                        "directives": Array [],
                        "kind": "OperationDefinition",
                        "name": undefined,
                        "operation": "query",
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [
                                Object {
                                  "arguments": Array [],
                                  "kind": "Directive",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "client",
                                  },
                                },
                              ],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "userLocation",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "id",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "name",
                                    },
                                    "selectionSet": undefined,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                        "variableDefinitions": Array [],
                      },
                    ],
                    "kind": "Document",
                    "loc": Object {
                      "end": 68,
                      "start": 0,
                    },
                  },
                },
                "result": Object {
                  "userLocation": Object {
                    "id": 1,
                    "name": "Lagos",
                  },
                },
              },
            ],
            "{\\"variables\\":{}}": Array [
              Object {
                "request": Object {
                  "query": undefined,
                },
                "result": Array [
                  Object {
                    "id": "2",
                    "name": "Kampala",
                  },
                  Object {
                    "id": "3",
                    "name": "Nairobi",
                  },
                  Object {
                    "id": "1",
                    "name": "Lagos",
                  },
                ],
              },
            ],
          },
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": false,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
          "client": [Circular],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "queryManager": QueryManager {
          "assumeImmutableResults": false,
          "clientAwareness": Object {
            "name": undefined,
            "version": undefined,
          },
          "dataStore": DataStore {
            "cache": InMemoryCache {
              "addTypename": false,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": false,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
          },
          "fetchQueryRejectFns": Map {},
          "idCounter": 1,
          "inFlightLinkObservables": Map {},
          "link": MockLink {
            "addTypename": false,
            "mockedResponsesByKey": Object {
              "{\\"variables\\":{},\\"query\\":\\"{\\\\n  userLocation @client {\\\\n    id\\\\n    name\\\\n  }\\\\n}\\\\n\\"}": Array [
                Object {
                  "request": Object {
                    "query": Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": undefined,
                          "operation": "query",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [
                                  Object {
                                    "arguments": Array [],
                                    "kind": "Directive",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "client",
                                    },
                                  },
                                ],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "userLocation",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "id",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "name",
                                      },
                                      "selectionSet": undefined,
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 68,
                        "start": 0,
                      },
                    },
                  },
                  "result": Object {
                    "userLocation": Object {
                      "id": 1,
                      "name": "Lagos",
                    },
                  },
                },
              ],
              "{\\"variables\\":{}}": Array [
                Object {
                  "request": Object {
                    "query": undefined,
                  },
                  "result": Array [
                    Object {
                      "id": "2",
                      "name": "Kampala",
                    },
                    Object {
                      "id": "3",
                      "name": "Nairobi",
                    },
                    Object {
                      "id": "1",
                      "name": "Lagos",
                    },
                  ],
                },
              ],
            },
          },
          "localState": LocalState {
            "cache": InMemoryCache {
              "addTypename": false,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": false,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
            "client": [Circular],
          },
          "mutationStore": MutationStore {
            "store": Object {},
          },
          "onBroadcast": [Function],
          "pollingInfoByQueryId": Map {},
          "queries": Map {},
          "queryDeduplication": true,
          "queryStore": QueryStore {
            "store": Object {},
          },
          "ssrMode": false,
          "transformCache": WeakMap {},
        },
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": false,
            "cacheKeyRoot": KeyTrie {
              "weakness": true,
            },
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "freezeResults": false,
              "resultCaching": true,
            },
            "data": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "maybeBroadcastWatch": [Function],
            "optimisticData": DepTrackingCache {
              "data": Object {},
              "depend": [Function],
            },
            "silenceBroadcast": false,
            "storeReader": StoreReader {
              "executeSelectionSet": [Function],
              "executeStoreQuery": [Function],
              "executeSubSelectedArray": [Function],
              "freezeResults": false,
            },
            "storeWriter": StoreWriter {},
            "typenameDocumentCache": Map {},
            "watches": Set {},
          },
        },
        "typeDefs": undefined,
        "version": "2.6.4",
        "watchQuery": [Function],
      }
    }
  >
    <BrowserRouter>
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "blank",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <TopMenuComponent
          changeUserLocation={[Function]}
          history={
            Object {
              "push": [MockFunction],
            }
          }
        >
          <div
            className="top-menu"
          >
            <div
              className="container size-2-8 nav-menu"
            >
              <div
                className="container content-start nav-left"
              >
                <ul
                  className="inline nav-brand"
                >
                  <li
                    className="logo"
                  >
                    <img
                      alt="Logo"
                      src="https://firebasestorage.googleapis.com/v0/b/learning-map-app.appspot.com/o/MrmFrontImages%2Fconverge_logo.svg?alt=media&token=cd6a1244-91bb-4a1b-8d74-696bd42053ac"
                    />
                  </li>
                  <li
                    className="logo-text"
                  >
                    <h1>
                      CONVERGE
                    </h1>
                  </li>
                </ul>
              </div>
              <div
                className="container content-end nav-right"
              >
                <div
                  className="search-box"
                >
                  <div
                    className="container input-container"
                  >
                    <div
                      className="search-box__input-field"
                    >
                      <Input
                        controlsClass=""
                        id="amenity"
                        inputClass="mrm-input default-input"
                        labelClass="add-resource-controls"
                        labelName=" "
                        name="amenity"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        placeholder=""
                        type="text"
                        value=""
                      >
                        <div
                          className="add-resource-controls"
                        >
                          <label
                            htmlFor="amenity"
                          >
                             
                            <input
                              className="mrm-input default-input"
                              defaultValue=""
                              id="amenity"
                              name="amenity"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              placeholder=""
                              type="text"
                            />
                          </label>
                        </div>
                      </Input>
                      <img
                        alt="Search icon"
                        className="search-icon"
                        onClick={[Function]}
                        onKeyPress={[Function]}
                        src="https://firebasestorage.googleapis.com/v0/b/learning-map-app.appspot.com/o/MrmFrontImages%2Fsearch_icon.svg?alt=media&token=ef28a273-f3ea-4370-9720-845bae1cd05e"
                      />
                    </div>
                  </div>
                </div>
                <div
                  className="container side-nav"
                >
                  <div
                    className="notifications"
                  >
                    <img
                      alt="Notification icon"
                      src="https://firebasestorage.googleapis.com/v0/b/learning-map-app.appspot.com/o/MrmFrontImages%2Fnotifications_icon.svg?alt=media&token=23b8d4c8-1c47-4591-bb55-2a97807675fd"
                    />
                  </div>
                  <div
                    className="location-dropdown analytics-cover"
                  >
                    <div
                      className="btn-right"
                    >
                      <div
                        className="btn-right__location"
                      >
                        <Button
                          classProp="btn-right__location__btn"
                          handleClick={null}
                          isDisabled={false}
                          title="Lagos"
                          type={2}
                        >
                          <button
                            className="btn-right__location__btn btn-secondary"
                            disabled={false}
                            onClick={null}
                          >
                            <span>
                              Lagos
                            </span>
                          </button>
                        </Button>
                      </div>
                    </div>
                  </div>
                  <div
                    className="profile"
                  >
                    <img
                      alt="Profile icon"
                      className="menu-icon"
                    />
                  </div>
                  <div
                    className="profile-name"
                  >
                    <span
                      className="username"
                    >
                      undefined undefined
                    </span>
                    <withRouter(ProfileMenu)>
                      <Route
                        render={[Function]}
                      >
                        <ProfileMenu
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "createHref": [Function],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "blank",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "pathname": "blank",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": false,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                        >
                          <Dropdown
                            content={
                              <span
                                className="preference-dropdown-list"
                              >
                                <NavLink
                                  activeClassName="active"
                                  ariaCurrent="true"
                                  className="preference-link"
                                  to="/preference"
                                >
                                  <div
                                    className="preference-div"
                                  >
                                    <li>
                                      Preferences
                                    </li>
                                  </div>
                                  <img
                                    alt="logout"
                                    className="preference-icon"
                                    src="https://firebasestorage.googleapis.com/v0/b/learning-map-app.appspot.com/o/MrmFrontImages%2Fsettings_gears.svg?alt=media&token=f8e21af6-70f7-4c0a-9115-b6013712abbb"
                                    type="image"
                                  />
                                </NavLink>
                                <div
                                  className="preference-border"
                                />
                                <button
                                  className="logout-btn"
                                  onClick={[Function]}
                                  tabIndex={0}
                                >
                                  Log Out
                                </button>
                              </span>
                            }
                            isPreference={true}
                          >
                            <div
                              className="dropdown-caret"
                            >
                              <button
                                onMouseDown={[Function]}
                              >
                                <span>
                                   ⌄ 
                                </span>
                              </button>
                            </div>
                          </Dropdown>
                        </ProfileMenu>
                      </Route>
                    </withRouter(ProfileMenu)>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </TopMenuComponent>
      </Router>
    </BrowserRouter>
  </ApolloProvider>
</MockedProvider>
`;
